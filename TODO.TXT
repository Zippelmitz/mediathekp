TODO:

* Use air date of a media to determine if abo should download it or not

* add possibility to VACUUM the db, as it seems to slow down or even completely fail the
  refresh_media action

* consider have aboname being optional in action runabo; simply run all programmed abos

* implement more reliable mplayer dumping... allow several tries

* implement also show_abo,$name (show db entries and if file exists, when it expires)

* del_abo: have optional to remove also all related media 

* Think about how to have for powerful constraints, not just "*" which translates 
  into "LIKE", but something compound should be possible, e.g.  --theme "Terra X" --title "!vorschau*"

* Change module layout.  Use Module::Starter to create typical structure with Makefile.PL and a manifest.

* Connect to database with option RaiseErrors=>1, and wrap any dangerous queries with try/catch blocks (use Try::Tiny)

* Standardise generation of where_sql and where_args for count_videos() and list() to reduce code duplication

* Make unit tests to verify
  - parsing of sample xml
  - create_db.sql
  - loading of sample xml
  - ...?

DONE:
* Added air date to db, and use it as a search/count criterion
* DELETE seems to always succeed, even if the abo does not exist: checking now return value
* implement delete downloaded media (delete from target folder and from downloads
  in db)
* fix flvstreamer... commandline works with given parameters, but Video::Flvstreamer fails...
* implement list downloaded media (those that are not expired, i.e. still in the
  target folder)
* using IO::Uncompress::AnyUncompress to unzip/bunzip2 media file 
* add new commands in help
* add_abo: make prep statement to insert NULL values
* change prepared statements in add_abo, del_abo in direct do's.
* fix paths such that they don't contain <space>s
* check url: if http run mplayer, else flvstreamer
